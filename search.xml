<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[分布式数据库——第二章 数据与数据模型]]></title>
    <url>%2F2019%2F03%2F%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[1.数据与数据模型 •数据 – 给定事实 •数据模型 – 抽象的, 自含的, 对象和操作符等的逻辑定义, 所有这些一起组成了抽象机 •实现 – 真实机器上的物理实现 •数据抽象 –实体与联系 实体（Entities） supplier, part, project, warehouse, employee …. 联系（Relationships） sp, sj, spj……. –特征 (Properties) 供应商 : location…. 零件 : weight ….. 2.数据独立 •数据库技术的主要目标 •适应应用需求，数据物理表示和访问技术的改变是必要的 •两类独立性 物理数据独立 当数据库的内部存储结构发生改变时，只要修改模式/内模式映象，可保持概念模式不变，从而保持外模式以及用户程序的不变，保证了数据与程序的物理独立性——数据的物理独立性 逻辑数据独立 当概念模式发生改变时，只要修改外模式/模式映象，可保持外模式不变，从而保持用户应用程序不变，保证了数据与用户程序的逻辑独立性——数据的逻辑独立性 3.体系结构 •三层体系结构 •外模式 单个用户所看到的局部数据的逻辑结构和特征的描述 建立在概念模式之上，同一概念模式上可有多个不同的外模式 通过外模式DDL进行定义 •概念模式 数据库中全体数据的逻辑结构和特征的描述 一个数据库只有一个概念模式 通过模式DDL进行定义 •内模式 数据物理结构和存储方式的描述 一个数据库只有一个内模式 通过内模式DDL定义 4.关系模型 •术语 域 （Domain） 一组具有相同数据类型的值的集合。每个属性有一个域 属性 （Attribute） 二维表格的每一列 元组 （Tuple） 每一行称为关系的一个元组 基数 （Cardinality） 元组的数目 度 （Degree） 列的数目 •性质 一个关系是一个规范化的二维表格 属性值不可分解 不允许表中有表 元组不可重复 因此一个关系模式至少存在一个候选码 没有行序，即元组之间无序 关系是元组的集合，集合的元素是无序的 没有列序，即属性之间无序 关系模式是属性的集合 •操作 选择 （select） 从表中抽取指定的行 投影 （ Project） 从表中抽取指定的列 连接 （Join） 在公共列的基础上连接两个表 以集合为单元操作 算子和结果都是表 闭包性质 一个操作的的输出结果可以是另一个操作的输入 •Key 候选键（Candidate Keys） 当且仅当如下条件成立K 是关系R候选键 唯一性（Uniqueness） 最小性（Irreducibility） e.g. S(s#) 是键, S(s#, age) 是超键（ super key ） 主关键字(Primary Keys)与候选键 Primary key 是被关系选中的候选键 主关键字不能取空值（not null） 外关键字（Foreign Key） – R2 是一关系, R2 中的外关键字是R2的一组属性, FK, 满足: 存在关系R1 有候选键 CK R2 中的每个FK 值一定与 R1中某个元组的CK值相等. 引用完整性 数据库不能含有任何不匹配的外关键字 ON DELETE CASCADE/RESTRICT/NO ACTION ON UPDATE CASCADE/RESTRICT/NO ACTION 解释：引用关系做删除和更新操作的影响：CASCADE跟随一起变化，RESTRICT受限，不允许删除和更新，NO ACTION 不变化——引用完整性受到影响。 •语言 （SQL，代数） DDL 数据库定义语言 创建create – Table – View – Index 例： 创建表： Create Table DEPT ( DEPT# Number, DNAME Char(5), Budget Number( 7,2)); 创建索引： Create index I1 on EMP (E#); Create index I2 on EMP (Ename); 创建唯一性索引： Create unique index I1 on EMP (E#); 创建聚集索引（ 元组按照索引值顺序，物理上尽可能的存储在一起 ,在索引值上执行扫描（scan）操作时可以减少 I/O.）： Create cluster index CI1 on EMP (E#); 含有完整性定义得关系定义例子： Create Table SP ( s# s# not null, p# p# not null, qty qty not null, primary key (s#, p#), foreign key (s#) references S on delete cascade on update cascade, foreign key (p#) references P on delete cascade on update cascade, check (qty &gt;0 and qty &lt;5001) ); DML数据库操纵语言 查询select 例： 查询年龄40岁以下不同部门平均工资大于6000的部门，并按部门降序列表。 select d#, avg (SAL) from EMP where age &lt; 40 group by d# having avg (SAL) &gt; 6000 order by d# desc； 查询在sale部门工作的职工名。 select distinct Ename from EMP where d# in (select d# from DEPT where Dname=‘sale’) 查询缺少某门课成绩的学生学号。 Select s# From SC Where score IS NULL 查询只选修了1门或2门课程的学生学号、姓名和课程数。 Select student.s#, sname, count_c# From (Select s# as s#, count(s#) as count_c# From sc Group by s#) SC2, student Where sc2.s# = student.s# and (count_c#=1 OR count_c#=2) 删除delete 例： 删除所有低于平均工资的职工 。 delete from EMP where SAL &lt; (select avg (SAL) from EMP) 插入insert 例： insert into S (status, city, s#, sname) values (20, ‘shanghai’, ‘s6’, ‘wang ping’ )； 对所有在黄山路 支行的贷款者$200 存款的礼物。 insert into account select loan-number, branch-name, 200 from loan where branch-name = ‘huangshanlu’ 更新update 例： 工资大于 $4,000 的增加 6%, 其他职工工资增加 5%. 嵌入SQL 单元组查询 EXEC SQL Select Ename INTO :ename From EMP Where e# = ‘e1’ 查询供应了amount 数量零件的供应商名字和其所在的城市，先定义游标（ cursor） EXEC SQL declare c cursor for select sname, city from S, SP where S.s# = SP.s# and SP.QTY &gt; :amount 游标打开语句（ open ），执行游标查询 EXEC SQL open c 游标取语句（fetch ）获取一个元组送入主变量 EXEC SQL fetch c into :cn, :cc 通过循环调用fetch语句，获取所有元组 游标关闭语句（ close ） EXEC SQL close c 游标更新定义 declare c cursor for select * from EMP where city = ‘Parise’ for update 修改当前游标元组 update EMP set SAL = SAL + 100 where current of c]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式数据库——第一章 高级数据库概述]]></title>
    <url>%2F2019%2F03%2F%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[第一章 高级数据库概述1.数据与存储系统 •存储层次 Register Cache 主存（Main memory） 辅存（Disk） •新型存储体系 2.数据库系统发展 •数据模型 数据结构, 操作 层次, 网状, 关系, OO, 时态, 空间, 图, 时空, 文本, 工程, 生物, 地理, 图像数据库等 •运行环境 集中式, 分布式, 并行,移动, Cluster, Web, 嵌入，云等 •计算方式 被动/主动, 实时数据库 批处理/流处理等 •数据库（DB） 可以存储长时间的信息集合 •数据库管理系统（DBMS） 允许用户使用专门的数据定义语言和操作语言, 支持大数据量数据的长时间存储,并能正确控制多个用户对数据有效存取的软件 3.关系模型与面向对象模型 •概念层 ——直接面对用户 语义表达能力强 易于被用户理解 独立于任何DBMS 易于向逻辑模型转换 •逻辑层 ——数据模型 用户通过DBMS看到的现实世界 传统的DBMS模型：层次，网络，关系模型 新型的DBMS模型：O—O模型，对象—关系模型等 •物理层 ——对用户透明 数据的表示（存储格式） 数据的索引 高效的操作实现 一致性维护及故障处理 •为什么需要OODB 一些数据结构复杂，难于用关系模型描述。 •面向对象模型 —— OO模型 基本概念： 对象标识 OID 对象封装 类和类的嵌套 类和类的继承 持久对象概念 数据模型 用对象与类结构以及类间继承与组合关系建立数据间的复杂结构关系 模式上的操作 用对象与类中方法构作模式上的操作，这种操作语义远强于传统数据模型 OODBMS必须满足两个基本条件 支持核心的面向对象数据模型 支持传统数据库系统所具有的数据库特征 •特化、泛化 •概念模型及其描述工具 E/R 模型：实体—联系模型 –用实体描述对象属性 –用联系描述对象间的语义关系 基于UML的面向对象的模型 （Unified Modeling Language） –静态对象模型 描述对象的属性，关联，聚合，继承，等等 –动态对象模型 描述对象行为，相互作用，合作和变化，等等 –支持概念模型与逻辑模型无缝联接 基于XML的对象模型 –易学，易扩充 –易于快速开发软件 –多个工具可以支持结构转换 4.集中式系统与分布式系统 •分布式数据库系统 定义: 物理上分散而逻辑上集中的数据库系统. 特点 物理分布性 数据不在单个Site上, 按全局需求将数据划分成一定的数据子集, 分散存储在各个Site上 逻辑整体性 各个Site上的数据子集, 相互间有严密的约束规则加以限定, 逻辑上是一个整体 站点自治性 各个Site上的数据(即LDB)是由本地的DBMS管理, 具有自治处理能力 •为什么需要分布式系统 分布为并行执行提供了可能性 复制增加了可用性 •分布式数据库分类 同构型(Homogeneous) 各个Site上的DB数据模型相同 进一步可分为 同构同质型 同构异质型 异构型(Heterogeneous) 各个Site上的DB数据模型不同 集中型 DDB的全局控制信息位于一个中心Sie上 分散型 每个Site上包含有全局控制信息的一个Copy 可变型 DDB分成两组, 一组Site包含全局控制信息Copy(主Site), 另一组不含全局Copy(辅Site)]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
</search>
