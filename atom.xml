<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JKZhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://JKZhang.github.io/"/>
  <updated>2019-03-29T14:36:03.827Z</updated>
  <id>http://JKZhang.github.io/</id>
  
  <author>
    <name>JKZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式数据库——第二章 数据与数据模型</title>
    <link href="http://JKZhang.github.io/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/</id>
    <published>2019-03-29T14:34:00.000Z</published>
    <updated>2019-03-29T14:36:03.827Z</updated>
    
    <content type="html"><![CDATA[<p>1.数据与数据模型</p><p>•数据</p><p> – 给定事实</p><p>•数据模型 </p><p>– 抽象的, 自含的, 对象和操作符等的逻辑定义, 所有这些一起组成了抽象机</p><p>•实现</p><p> – 真实机器上的物理实现</p><p>•数据抽象</p><p>–实体与联系</p><p>实体（Entities）</p><p>supplier, part, project, warehouse, employee ….</p><p>联系（Relationships）</p><p>sp, sj, spj…….</p><p>–特征 (Properties)</p><p>供应商 : location….</p><p>零件 : weight …..</p><p>2.数据独立</p><p>•数据库技术的主要目标</p><p>•适应应用需求，数据物理表示和访问技术的改变是必要的</p><p>•两类独立性</p><ul><li><p>物理数据独立</p></li><li><ul><li>当数据库的内部存储结构发生改变时，只要修改模式/内模式映象，可保持概念模式不变，从而保持外模式以及用户程序的不变，保证了数据与程序的物理独立性——数据的物理独立性</li></ul></li><li><p>逻辑数据独立</p></li><li><ul><li>当概念模式发生改变时，只要修改外模式/模式映象，可保持外模式不变，从而保持用户应用程序不变，保证了数据与用户程序的逻辑独立性——数据的逻辑独立性</li></ul></li></ul><p>3.体系结构</p><p>•三层体系结构</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/githubrepository\JKZhang.github.io\source\_posts\分布式数据库——第二章：数据与数据模型\clip_image001.png" alt="clip_image001"></p><p>•外模式</p><ul><li>单个用户所看到的局部数据的逻辑结构和特征的描述</li><li>建立在概念模式之上，同一概念模式上可有多个不同的外模式</li><li>通过外模式DDL进行定义</li></ul><p>•概念模式</p><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>一个数据库只有一个概念模式</li><li>通过模式DDL进行定义</li></ul><p>•内模式</p><ul><li>数据物理结构和存储方式的描述</li><li>一个数据库只有一个内模式</li><li>通过内模式DDL定义</li></ul><p>4.关系模型</p><p>•术语</p><ul><li><p>域 （Domain）</p></li><li><ul><li>一组具有相同数据类型的值的集合。每个属性有一个域</li></ul></li><li><p>属性 （Attribute）</p></li><li><ul><li>二维表格的每一列</li></ul></li><li><p>元组 （Tuple）</p></li><li><ul><li>每一行称为关系的一个元组</li></ul></li><li><p>基数 （Cardinality） 元组的数目</p></li><li><p>度 （Degree） 列的数目</p></li></ul><p>•性质</p><ul><li><p>一个关系是一个规范化的二维表格</p></li><li><ul><li>属性值不可分解</li></ul></li></ul><p>不允许表中有表</p><ul><li>元组不可重复</li></ul><p>因此一个关系模式至少存在一个候选码</p><ul><li>没有行序，即元组之间无序</li></ul><p>关系是元组的集合，集合的元素是无序的</p><ul><li>没有列序，即属性之间无序</li></ul><p>关系模式是属性的集合</p><p>•操作</p><ul><li>选择 （select）</li></ul><p>从表中抽取指定的行</p><ul><li>投影 （ Project）</li></ul><p>从表中抽取指定的列</p><ul><li>连接 （Join）</li></ul><p>在公共列的基础上连接两个表</p><ul><li>以集合为单元操作</li></ul><p>算子和结果都是表</p><ul><li>闭包性质</li></ul><p>一个操作的的输出结果可以是另一个操作的输入</p><p>•Key</p><ul><li>候选键（Candidate Keys）</li></ul><p>当且仅当如下条件成立K 是关系R候选键</p><ul><li>唯一性（Uniqueness）</li><li>最小性（Irreducibility）</li><li>e.g. S(s#) 是键,</li></ul><p>S(s#, age) 是超键（ super key ）</p><ul><li>主关键字(Primary Keys)与候选键</li></ul><p>Primary key 是被关系选中的候选键</p><ul><li>主关键字不能取空值（not null）</li><li>外关键字（Foreign Key）</li></ul><p>– R2 是一关系, R2 中的外关键字是R2的一组属性, FK, 满足:</p><ul><li>存在关系R1 有候选键 CK</li><li><p>R2 中的每个FK 值一定与 R1中某个元组的CK值相等.</p></li><li><p>引用完整性</p></li></ul><p>数据库不能含有任何不匹配的外关键字</p><ul><li>ON DELETE</li></ul><p>CASCADE/RESTRICT/NO ACTION</p><ul><li>ON UPDATE</li></ul><p>CASCADE/RESTRICT/NO ACTION</p><p>解释：引用关系做删除和更新操作的影响：CASCADE跟随一起变化，RESTRICT受限，不允许删除和更新，NO ACTION 不变化——引用完整性受到影响。</p><p>•语言 （SQL，代数）</p><ul><li><p>DDL 数据库定义语言</p></li><li><ul><li>创建create</li></ul></li></ul><p>– Table</p><p>– View</p><p>– Index</p><ul><li>例：</li></ul><p>创建表：</p><p>Create Table DEPT ( DEPT# Number,</p><p>DNAME Char(5),</p><p>Budget Number( 7,2));</p><p>创建索引：</p><p>Create index I1 on EMP (E#);</p><p>Create index I2 on EMP (Ename);</p><p>创建唯一性索引：</p><p>Create unique index I1 on EMP (E#);</p><p>创建聚集索引（</p><p>元组按照索引值顺序，物理上尽可能的存储在一起 ,在索引值上执行扫描（scan）操作时可以减少 I/O.）：</p><p>Create cluster index CI1 on EMP (E#);</p><p>含有完整性定义得关系定义例子：</p><p>Create Table SP ( s# s# not null,</p><p>p# p# not null, qty qty not null,</p><p>primary key (s#, p#),</p><p>foreign key (s#) references S</p><p>on delete cascade</p><p>on update cascade,</p><p>foreign key (p#) references P</p><p>on delete cascade</p><p>on update cascade,</p><p>check (qty &gt;0 and qty &lt;5001) );</p><ul><li><p>DML数据库操纵语言</p></li><li><ul><li>查询select</li></ul></li><li><ul><li>例：</li></ul></li></ul><p>查询年龄40岁以下不同部门平均工资大于6000的部门，并按部门降序列表。</p><p>select d#, avg (SAL) from EMP where age &lt; 40</p><p>group by d# having avg (SAL) &gt; 6000</p><p>order by d# desc；</p><p>查询在sale部门工作的职工名。</p><p>select distinct Ename from EMP where d# in</p><p>(select d# from DEPT</p><p>where Dname=‘sale’)</p><p>查询缺少某门课成绩的学生学号。</p><p>Select s# From SC Where score IS NULL</p><p>查询只选修了1门或2门课程的学生学号、姓名和课程数。</p><p>Select student.s#, sname, count_c# From (Select s# as s#, count(s#) as count_c# From sc Group by s#) SC2, student Where sc2.s# = student.s# and (count_c#=1 OR count_c#=2)</p><ul><li><p>删除delete</p></li><li><p>例：</p></li></ul><p>删除所有低于平均工资的职工 。</p><p>delete from EMP where SAL &lt; (select avg (SAL) from EMP)</p><ul><li><p>插入insert</p></li><li><p>例：</p></li></ul><p>insert into S (status, city, s#, sname) values (20, ‘shanghai’, ‘s6’, ‘wang ping’ )；</p><p>对所有在黄山路 支行的贷款者$200 存款的礼物。</p><p>insert into account select loan-number, branch-name, 200 from loan where branch-name = ‘huangshanlu’</p><ul><li><p>更新update</p></li><li><p>例：</p></li></ul><p>工资大于 $4,000 的增加 6%, 其他职工工资增加 5%.</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/githubrepository\JKZhang.github.io\source\_posts\分布式数据库——第二章：数据与数据模型\clip_image002.png" alt="clip_image002"></p><ul><li><p>嵌入SQL</p></li><li><ul><li>单元组查询</li></ul></li></ul><p>EXEC SQL Select Ename INTO :ename</p><p>From EMP Where e# = ‘e1’</p><ul><li>查询供应了amount 数量零件的供应商名字和其所在的城市，先定义游标（ cursor）</li></ul><p>EXEC SQL</p><p>declare c cursor for </p><p>select sname, city </p><p>from S, SP</p><p>where S.s# = SP.s# </p><p>and SP.QTY &gt; :amount</p><p>游标打开语句（ open ），执行游标查询</p><p>EXEC SQL open c</p><p>游标取语句（fetch ）获取一个元组送入主变量</p><p>EXEC SQL fetch c into :cn, :cc</p><p>通过循环调用fetch语句，获取所有元组</p><p>游标关闭语句（ close ）</p><p>EXEC SQL close c</p><p>游标更新定义</p><p>declare c cursor for select * from EMP where city = ‘Parise’ for update</p><p>修改当前游标元组</p><p>update EMP set SAL = SAL + 100 where current of c</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.数据与数据模型&lt;/p&gt;
&lt;p&gt;•数据&lt;/p&gt;
&lt;p&gt; – 给定事实&lt;/p&gt;
&lt;p&gt;•数据模型 &lt;/p&gt;
&lt;p&gt;– 抽象的, 自含的, 对象和操作符等的逻辑定义, 所有这些一起组成了抽象机&lt;/p&gt;
&lt;p&gt;•实现&lt;/p&gt;
&lt;p&gt; – 真实机器上的物理实现&lt;/p&gt;
&lt;p&gt;•数
      
    
    </summary>
    
      <category term="数据库" scheme="http://JKZhang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://JKZhang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式" scheme="http://JKZhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式数据库——第一章 高级数据库概述</title>
    <link href="http://JKZhang.github.io/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <id>http://JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/</id>
    <published>2019-03-29T13:00:00.000Z</published>
    <updated>2019-03-29T14:16:31.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-高级数据库概述"><a href="#第一章-高级数据库概述" class="headerlink" title="第一章 高级数据库概述"></a>第一章 高级数据库概述</h1><p>1.数据与存储系统</p><p>•存储层次</p><ul><li>Register</li><li>Cache</li><li>主存（Main memory）</li><li>辅存（Disk）</li></ul><p>•新型存储体系</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image001.png" alt="clip_image001"></p><p>2.数据库系统发展</p><p>•数据模型</p><ul><li>数据结构, 操作</li><li>层次, 网状, 关系, OO, 时态, 空间, 图, 时空, 文本, 工程, 生物, 地理, 图像数据库等</li></ul><p>•运行环境</p><ul><li>集中式, 分布式, 并行,移动, Cluster, Web, 嵌入，云等</li></ul><p>•计算方式</p><ul><li>被动/主动, 实时数据库</li><li>批处理/流处理等</li></ul><p>•数据库（DB）</p><ul><li>可以存储长时间的信息集合</li></ul><p>•数据库管理系统（DBMS）</p><ul><li>允许用户使用专门的数据定义语言和操作语言, 支持大数据量数据的长时间存储,并能正确控制多个用户对数据有效存取的软件</li></ul><p>3.关系模型与面向对象模型</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image002.png" alt="clip_image002"></p><p>•概念层 ——直接面对用户</p><ul><li>语义表达能力强</li><li>易于被用户理解</li><li>独立于任何DBMS</li><li>易于向逻辑模型转换</li></ul><p>•逻辑层 ——数据模型</p><ul><li>用户通过DBMS看到的现实世界</li><li>传统的DBMS模型：层次，网络，关系模型</li><li>新型的DBMS模型：O—O模型，对象—关系模型等</li></ul><p>•物理层 ——对用户透明</p><ul><li>数据的表示（存储格式）</li><li>数据的索引</li><li>高效的操作实现</li><li>一致性维护及故障处理</li></ul><p>•为什么需要OODB</p><p>一些数据结构复杂，难于用关系模型描述。</p><p>•面向对象模型 —— OO模型</p><ul><li><p>基本概念：</p></li><li><ul><li>对象标识 OID</li><li>对象封装</li><li>类和类的嵌套</li><li>类和类的继承</li><li>持久对象概念</li></ul></li><li><p>数据模型</p></li></ul><p>用对象与类结构以及类间继承与组合关系建立数据间的复杂结构关系</p><ul><li>模式上的操作</li></ul><p>用对象与类中方法构作模式上的操作，这种操作语义远强于传统数据模型</p><ul><li><p>OODBMS必须满足两个基本条件</p></li><li><ul><li>支持核心的面向对象数据模型</li><li>支持传统数据库系统所具有的数据库特征</li></ul></li></ul><p>•特化、泛化</p><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image003.png" alt="clip_image003"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image004.png" alt="clip_image004"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image005.png" alt="clip_image005"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image006.png" alt="clip_image006"></p><p>•概念模型及其描述工具</p><ul><li>E/R 模型：实体—联系模型</li></ul><p>–用实体描述对象属性</p><p>–用联系描述对象间的语义关系</p><ul><li>基于UML的面向对象的模型 （Unified Modeling      Language）</li></ul><p>–静态对象模型</p><ul><li>描述对象的属性，关联，聚合，继承，等等</li></ul><p>–动态对象模型</p><ul><li>描述对象行为，相互作用，合作和变化，等等</li></ul><p>–支持概念模型与逻辑模型无缝联接</p><ul><li>基于XML的对象模型</li></ul><p>–易学，易扩充</p><p>–易于快速开发软件</p><p>–多个工具可以支持结构转换</p><p>4.集中式系统与分布式系统</p><p>•分布式数据库系统</p><ul><li><p>定义: 物理上分散而逻辑上集中的数据库系统.</p></li><li><p>特点</p></li><li><ul><li>物理分布性</li></ul></li></ul><p>数据不在单个Site上, 按全局需求将数据划分成一定的数据子集, 分散存储在各个Site上</p><ul><li>逻辑整体性</li></ul><p>各个Site上的数据子集, 相互间有严密的约束规则加以限定, 逻辑上是一个整体</p><ul><li>站点自治性</li></ul><p>各个Site上的数据(即LDB)是由本地的DBMS管理, 具有自治处理能力</p><p>•为什么需要分布式系统</p><ul><li>分布为并行执行提供了可能性</li><li>复制增加了可用性</li></ul><p>•分布式数据库分类</p><ul><li><p>同构型(Homogeneous)</p></li><li><ul><li>各个Site上的DB数据模型相同</li><li>进一步可分为</li></ul><p>同构同质型</p><p>同构异质型</p></li><li><p>异构型(Heterogeneous)</p></li></ul><p>各个Site上的DB数据模型不同</p><ul><li>集中型</li></ul><p>DDB的全局控制信息位于一个中心Sie上</p><ul><li>分散型</li></ul><p>每个Site上包含有全局控制信息的一个Copy</p><ul><li>可变型</li></ul><p>DDB分成两组, 一组Site包含全局控制信息Copy(主Site), 另一组不含全局Copy(辅Site)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-高级数据库概述&quot;&gt;&lt;a href=&quot;#第一章-高级数据库概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 高级数据库概述&quot;&gt;&lt;/a&gt;第一章 高级数据库概述&lt;/h1&gt;&lt;p&gt;1.数据与存储系统&lt;/p&gt;
&lt;p&gt;•存储层次&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="数据库" scheme="http://JKZhang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://JKZhang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式" scheme="http://JKZhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
